2022-03-26 17:06:12.680   [INF] Initializing UserService
2022-03-26 17:06:12.682   [INF] [Configuration.defaultConfigProvider()] Check conf: [/home/hypeit/Documents/TradingView/configs/config.json]
2022-03-26 17:06:12.682   [INF] [Configuration.defaultConfigProvider()] Check conf: [/usr/lib/tradingview/tradingview.asar/configs/config.json]
2022-03-26 17:06:12.682   [INF] [Configuration.defaultConfigProvider()] Use conf: [/usr/lib/tradingview/tradingview.asar/configs/config.json]
2022-03-26 17:06:12.684   [DBG] [Configuration.updateConfigFromEnvironment()] TVD_DEVMODE: false
2022-03-26 17:06:12.684   [DBG] [Configuration.updateConfigFromEnvironment()] TVD_LOG_VIEW_ENABLED: false
2022-03-26 17:06:12.684   [INF] Initializing AppEventsService
2022-03-26 17:06:12.685   [INF] Initializing AuthenticationHandler
2022-03-26 17:06:12.687   [DBG] Initializing SentryService
2022-03-26 17:06:12.688   [INF] Initializing MainService
2022-03-26 17:06:12.688   [DBG] $e().subscribeAppEvents()
2022-03-26 17:06:12.690   [INF] Main service created.
 * app path = (/usr/lib/tradingview/tradingview.asar)
 * documents path = (/home/hypeit/Documents/TradingView) 
2022-03-26 17:06:12.691   [INF] Persistence service initializing
2022-03-26 17:06:12.691   [DBG] $e().getVersionInfo()
2022-03-26 17:06:12.740   [INF] Logger initialized
2022-03-26 17:06:12.742   [INF] Initializing TabDragHandler
2022-03-26 17:06:12.742   [DBG] c().createRendererWorkerWindow()
2022-03-26 17:06:12.825   [INF] Initializing WindowService
2022-03-26 17:06:12.826   [DBG] Yt().getFocusedChartWindow()
2022-03-26 17:06:12.857   [DBG] S().applyWindowTheme()
2022-03-26 17:06:12.858   [DBG] S().load()
2022-03-26 17:06:12.869   [DBG] S().createAppAwaiter()
2022-03-26 17:06:12.875   [INF] Initializing SettingsProvider
2022-03-26 17:06:12.876   [DBG] vn().getShouldCredentialsSave()
2022-03-26 17:06:12.876   [DBG] vn().setShouldCredentialsSave()
2022-03-26 17:06:12.877   [INF] Initializing TrackEventService
2022-03-26 17:06:12.878   [DBG] l().saveSettings()
2022-03-26 17:06:12.878   [DBG] l().saveSettings()
2022-03-26 17:06:12.878   [DBG] Oe().doStartup()
2022-03-26 17:06:12.879   [DBG] Oe().checkFirstRun()
2022-03-26 17:06:12.879   [DBG] Oe().initSession()
2022-03-26 17:06:12.879   [DBG] te().initialize()
2022-03-26 17:06:12.880   [DBG] [UserService()] Startup
2022-03-26 17:06:12.881   [INF] [17:6:12]: 'Startup ' (888) ms
2022-03-26 17:06:12.881   [INF] App version: 1.0.3
2022-03-26 17:06:12.881   [DBG] $e().showSplashWindow()
2022-03-26 17:06:12.909   [DBG] Yt().getFocusedChartWindow()
2022-03-26 17:06:12.953   [DBG] $e().registerOsTasks()
2022-03-26 17:06:12.954   [DBG] $e().buildAppMenu()
2022-03-26 17:06:12.956   [DBG] Yt().getZoomValue()
2022-03-26 17:06:12.973   [DBG] $e().addUserMenu()
2022-03-26 17:06:12.976   [DBG] $e().makeLanguagesMenu()
2022-03-26 17:06:12.978   [DBG] [TrackEventService()] Startup
2022-03-26 17:06:12.978   [DBG] Oe().getCid()
2022-03-26 17:06:12.978   [DBG] $e().getVersionInfo()
2022-03-26 17:06:13.494   [INF] Will sign in user hypeit id(10583436)
2022-03-26 17:06:13.572   [DBG] $e().getVersionInfo()
2022-03-26 17:06:13.588   [DBG] S().createAppAwaiter()
2022-03-26 17:06:13.590   [INF] [17:6:12]-[17:6:13]: 'BaseWindow: loading window page' (731) ms
2022-03-26 17:06:13.597   [DBG] $e().getVersionInfo()
2022-03-26 17:06:13.638   [DBG] Drag service window finished load
2022-03-26 17:06:13.639   [DBG] Drag service window finished load
2022-03-26 17:06:13.639   [DBG] [BaseWindow.load()] Window page loaded
2022-03-26 17:06:13.658   [INF] Initializing drag service
2022-03-26 17:06:13.659   [DBG] Native: capture pointer
2022-03-26 17:06:13.673   [DBG] $e().getVersionInfo()
2022-03-26 17:06:13.674   [DBG] $e().getVersionInfo()
2022-03-26 17:06:13.733   [INF] Locale info. locale:(pl), host:(https://pl.tradingview.com/)
2022-03-26 17:06:13.733   [DBG] $e().addUserMenu()
2022-03-26 17:06:13.734   [DBG] $e().makeLanguagesMenu()
2022-03-26 17:06:13.738   [DBG] qt().notifyUserSignedIn()
2022-03-26 17:06:13.738   [DBG] Tn().onUserSignedIn()
2022-03-26 17:06:13.739   [DBG] Tn().updateUserData()
2022-03-26 17:06:13.739   [DBG] Tn().emitSwitchUser()
2022-03-26 17:06:13.740   [INF] Restore user id:(10583436) app state from (/home/hypeit/.config/TradingView/TVUserStorage/id-10583436/settings.json)
2022-03-26 17:06:13.740   [DBG] nt().restore()
2022-03-26 17:06:13.741   [DBG] Xe().restore()
2022-03-26 17:06:13.744   [DBG] kt().setUserData()
2022-03-26 17:06:13.755   [DBG] $e().beforeStateApplying()
2022-03-26 17:06:13.755   [DBG] $e().stateApplied()
2022-03-26 17:06:13.756   [DBG] b().internalApplyState()
2022-03-26 17:06:13.775   [DBG] Yt().getFocusedChartWindow()
2022-03-26 17:06:13.779   [DBG] S().applyWindowTheme()
2022-03-26 17:06:13.780   [INF] Created base window, tweaking current window
2022-03-26 17:06:13.781   [DBG] S(tvd:tabbed-window-control-342c67fe).addDisposable()
2022-03-26 17:06:13.781   [DBG] S(tvd:tabbed-window-control-342c67fe).addDisposable()
2022-03-26 17:06:13.784   [DBG] Yt().getFocusedChartWindow()
2022-03-26 17:06:13.796   [DBG] fe(tvd:tabbed-window-control-342c67fe).internalApplyState()
2022-03-26 17:06:13.797   [DBG] fe(tvd:tabbed-window-control-342c67fe).addTab()
2022-03-26 17:06:13.797   [DBG] S(tvd:tabbed-window-control-342c67fe).load()
2022-03-26 17:06:13.807   [DBG] b().resetItems()
2022-03-26 17:06:13.807   [DBG] aa().internalApplyState()
2022-03-26 17:06:14.249   [DBG] S(tvd:tabbed-window-control-342c67fe).createAppAwaiter()
2022-03-26 17:06:14.249   [INF] [17:6:13]-[17:6:14]: 'BaseWindow: loading window page' (452) ms
2022-03-26 17:06:14.267   [DBG] $e().getVersionInfo()
2022-03-26 17:06:14.268   [DBG] $e().getVersionInfo()
2022-03-26 17:06:14.300   [DBG] [Renderer] Window control id: tvd:tabbed-window-control-342c67fe
2022-03-26 17:06:14.317   [DBG] Window id:(tvd:tabbed-window-control-342c67fe) app ready
2022-03-26 17:06:14.319   [DBG] fe(tvd:tabbed-window-control-342c67fe).notifyTabsChanged()
2022-03-26 17:06:14.319   [DBG] fe(tvd:tabbed-window-control-342c67fe).updateTabsContainer()
2022-03-26 17:06:14.319   [DBG] S(tvd:tabbed-window-control-342c67fe).show()
2022-03-26 17:06:14.321   [DBG] [BaseWindow.load()] Window page loaded
2022-03-26 17:06:14.324   [DBG] Yt().getFocusedChartWindow()
2022-03-26 17:06:14.324   [DBG] fe(tvd:tabbed-window-control-342c67fe).findTabById()
2022-03-26 17:06:14.325   [INF] Create tab id:(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816) url:(https://pl.tradingview.com/chart/BJDaUZfU/)
2022-03-26 17:06:14.326   [DBG] X(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816).setupViewEvents()
2022-03-26 17:06:14.326   [DBG] ue(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816).setupTvViewEvents()
2022-03-26 17:06:14.326   [DBG] fe(tvd:tabbed-window-control-342c67fe).setActiveTab()
2022-03-26 17:06:14.327   [DBG] fe(tvd:tabbed-window-control-342c67fe).notifyTabsChanged()
2022-03-26 17:06:14.327   [DBG] fe(tvd:tabbed-window-control-342c67fe).updateTabsContainer()
2022-03-26 17:06:14.327   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:14.327   [DBG] fe(tvd:tabbed-window-control-342c67fe).setActiveTabView()
2022-03-26 17:06:14.328   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:14.328   [DBG] fe(tvd:tabbed-window-control-342c67fe).handleTabLoading()
2022-03-26 17:06:14.328   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:14.328   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:14.328   [DBG] fe(tvd:tabbed-window-control-342c67fe).notifyTabsChanged()
2022-03-26 17:06:14.328   [DBG] fe(tvd:tabbed-window-control-342c67fe).updateTabsContainer()
2022-03-26 17:06:14.328   [DBG] X(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816).load()
2022-03-26 17:06:14.329   [DBG] u().startTask()
2022-03-26 17:06:14.330   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:14.330   [DBG] Yt().prerenderView()
2022-03-26 17:06:14.332   [DBG] Yt().getFocusedChartWindow()
2022-03-26 17:06:14.339   [DBG] X(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816).setViewData()
2022-03-26 17:06:14.340   [DBG] Starting load tab from 0a49cd2b-9ebd-4412-b068-ceb8d0cb9816
2022-03-26 17:06:14.344   [INF] [Configuration.defaultConfigProvider()] Check conf: [/home/hypeit/Documents/TradingView/configs/navrules.json]
2022-03-26 17:06:14.344   [INF] [Configuration.defaultConfigProvider()] Check conf: [/usr/lib/tradingview/tradingview.asar/configs/navrules.json]
2022-03-26 17:06:14.345   [INF] [Configuration.defaultConfigProvider()] Use conf: [/usr/lib/tradingview/tradingview.asar/configs/navrules.json]
2022-03-26 17:06:14.349   [DBG] fe(tvd:tabbed-window-control-342c67fe).setActiveTab()
2022-03-26 17:06:14.349   [DBG] fe(tvd:tabbed-window-control-342c67fe).notifyTabsChanged()
2022-03-26 17:06:14.349   [DBG] fe(tvd:tabbed-window-control-342c67fe).updateTabsContainer()
2022-03-26 17:06:14.349   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:14.349   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:14.349   [DBG] fe(tvd:tabbed-window-control-342c67fe).updateTabsContainer()
2022-03-26 17:06:14.359   [DBG] fe(tvd:tabbed-window-control-342c67fe).restoreWindowState()
2022-03-26 17:06:14.359   [DBG] S(tvd:tabbed-window-control-342c67fe).maximize()
2022-03-26 17:06:14.361   [DBG] b().internalExtractState()
2022-03-26 17:06:14.361   [DBG] fe(tvd:tabbed-window-control-342c67fe).internalExtractState()
2022-03-26 17:06:14.361   [DBG] fe(tvd:tabbed-window-control-342c67fe).makeStateSnapshot()
2022-03-26 17:06:14.362   [DBG] X(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816).makeStateSnapshot()
2022-03-26 17:06:14.363   [DBG] aa().internalExtractState()
2022-03-26 17:06:14.363   [DBG] kt().setAppWindowsData()
2022-03-26 17:06:14.363   [DBG] Yt().notifyInitialized()
2022-03-26 17:06:14.364   [DBG] vn().updateStoredCredentials()
2022-03-26 17:06:14.364   [DBG] vn().getShouldCredentialsSave()
2022-03-26 17:06:14.364   [DBG] vn().getShouldCredentialsSave()
2022-03-26 17:06:14.364   [DBG] vn().setShouldCredentialsSave()
2022-03-26 17:06:14.364   [DBG] Try close splash screen
2022-03-26 17:06:14.407   [DBG] Yt().mergeAnonymousSession()
2022-03-26 17:06:14.408   [DBG] Yt().disposeDefaultWindow()
2022-03-26 17:06:14.408   [DBG] u().invalidate()
2022-03-26 17:06:14.410   [INF] [17:6:13]-[17:6:14]: 'Restore user session' (670) ms
2022-03-26 17:06:14.410   [DBG] kt().trackStartApp()
2022-03-26 17:06:14.411   [DBG] vn().updateStoredCredentials()
2022-03-26 17:06:14.411   [DBG] vn().getShouldCredentialsSave()
2022-03-26 17:06:14.412   [INF] [17:6:14]: 'Session restored' (2419) ms
2022-03-26 17:06:14.469   [DBG] fe(tvd:tabbed-window-control-342c67fe).getWindowStateAsync()
2022-03-26 17:06:14.472   [DBG] [Renderer] Window control id: tvd:tabbed-window-control-342c67fe
2022-03-26 17:06:14.472   [DBG] je().componentDidMount()
2022-03-26 17:06:14.474   [DBG] je().setParentId()
2022-03-26 17:06:14.475   [DBG] [TabPanel.render()] Tabs panel registered
2022-03-26 17:06:14.476   [INF] [App.componentDidMount()] App sends ready event
2022-03-26 17:06:14.500   [DBG] [App.setParentId()] Registered window id: tvd:tabbed-window-control-342c67fe
2022-03-26 17:06:14.501   [DBG] u().invalidate()
2022-03-26 17:06:14.503   [DBG] [App.componentDidMount() at getWindowState] Will update window state: 1
2022-03-26 17:06:14.523   [INF] setupI18nLocaleHandler (pl)
2022-03-26 17:06:14.524   [DBG] Re(tvd:tabs-container-ba30ce81).updateTabs()
2022-03-26 17:06:14.525   [DBG] Re(tvd:tabs-container-ba30ce81).updateTabs()
2022-03-26 17:06:14.552   [DBG] fe(tvd:tabbed-window-control-342c67fe).registerTabController()
2022-03-26 17:06:14.553   [DBG] X(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816).setController()
2022-03-26 17:06:14.554   [DBG] [TabComponent.componentDidMount()] registered controller for tab tvd:tab-fa7516a8
2022-03-26 17:06:14.554   [DBG] Re(tvd:tabs-container-ba30ce81).updateTabs()
2022-03-26 17:06:14.555   [DBG] Re(tvd:tabs-container-ba30ce81).updateTabs()
2022-03-26 17:06:14.556   [DBG] Re(tvd:tabs-container-ba30ce81).updateTabs()
2022-03-26 17:06:14.557   [DBG] je().initialize()
2022-03-26 17:06:14.558   [DBG] je().subscribeOnWindowEvents()
2022-03-26 17:06:14.652   [DBG] ne().registerDraggable()
2022-03-26 17:06:14.653   [DBG] ne().registerDroppable()
2022-03-26 17:06:14.673   [DBG] Yt().findWindow()
2022-03-26 17:06:14.674   [DBG] Yt().findWindow()
2022-03-26 17:06:14.677   [DBG] [TabComponent.componentDidMount()] registered draggable with id tvd:tab-fa7516a8
2022-03-26 17:06:14.684   [DBG] [TabPanel.componentDidMount()] Registered droppable with id: tvd:tabs-container-ba30ce81
2022-03-26 17:06:15.104   [DBG] Tab id:(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816) did-navigate (https://pl.tradingview.com/chart/BJDaUZfU/)
2022-03-26 17:06:15.144   [DBG] Tab id:(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816) page-title-updated
2022-03-26 17:06:16.261   [DBG] Tab id:(0a49cd2b-9ebd-4412-b068-ceb8d0cb9816) dom-ready
2022-03-26 17:06:16.261   [DBG] Yt().setZoomValue()
2022-03-26 17:06:16.802   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:16.802   [DBG] fe(tvd:tabbed-window-control-342c67fe).setActiveTabView()
2022-03-26 17:06:16.804   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:16.804   [DBG] fe(tvd:tabbed-window-control-342c67fe).setWindowLoading()
2022-03-26 17:06:19.262   [DBG] vn().getShouldCredentialsSave()
2022-03-26 17:14:51.267   [DBG] u().invalidate()
2022-03-26 17:18:17.685   [DBG] u().invalidate()
2022-03-26 17:19:10.633   [DBG] u().invalidate()
2022-03-26 23:22:42.377   [WRN] Failed request to https://data.tradingview.com/ping
2022-03-28 13:53:12.52    [WRN] Failed request to https://data.tradingview.com/ping
